{"ast":null,"code":"export default function decideWinner(previousStonePosition, board) {\n  //Check horizontal line.\n  let start = Math.min(0, previousStonePosition.col - 4);\n  let end = Math.min(18, previousStonePosition.col + 4);\n  let count = 0;\n  for (let i = start; i <= end; i++) {\n    if (board[previousStonePosition.row][previousStonePosition.col] === board[previousStonePosition.row][i]) {\n      count++;\n    } else {\n      count = 0;\n    }\n    if (count === 5) {\n      return board[previousStonePosition.row][previousStonePosition.col];\n    }\n  }\n\n  //Check vertical line.\n  start = Math.min(0, previousStonePosition.row - 4);\n  end = Math.min(18, previousStonePosition.row + 4);\n  count = 0;\n  for (let i = start; i <= end; i++) {\n    if (board[previousStonePosition.row][previousStonePosition.col] === board[i][previousStonePosition.col]) {\n      count++;\n    } else {\n      count = 0;\n    }\n    if (count === 5) {\n      return board[previousStonePosition.row][previousStonePosition.col];\n    }\n  }\n  return null;\n}","map":{"version":3,"names":["decideWinner","previousStonePosition","board","start","Math","min","col","end","count","i","row"],"sources":["C:/Users/HyungGeun/Documents/omok-front/src/decideWinner.js"],"sourcesContent":["export default function decideWinner(previousStonePosition, board) {\r\n\r\n    //Check horizontal line.\r\n    let start = Math.min(0, previousStonePosition.col - 4);\r\n    let end = Math.min(18, previousStonePosition.col + 4);\r\n\r\n    let count = 0;\r\n    for(let i = start; i <= end; i++) {\r\n        if(board[previousStonePosition.row][previousStonePosition.col] === board[previousStonePosition.row][i]) {\r\n            count++;\r\n        } else {\r\n            count = 0;\r\n        }\r\n\r\n        if(count === 5) {\r\n            return board[previousStonePosition.row][previousStonePosition.col];\r\n        }\r\n    }\r\n\r\n    //Check vertical line.\r\n    start = Math.min(0, previousStonePosition.row - 4);\r\n    end = Math.min(18, previousStonePosition.row + 4);\r\n\r\n    count = 0;\r\n    for(let i = start; i <= end; i++) {\r\n        if(board[previousStonePosition.row][previousStonePosition.col] === board[i][previousStonePosition.col]) {\r\n            count++;\r\n        } else {\r\n            count = 0;\r\n        }\r\n\r\n        if(count === 5) {\r\n            return board[previousStonePosition.row][previousStonePosition.col];\r\n        }\r\n    }\r\n\r\n    return null;\r\n}"],"mappings":"AAAA,eAAe,SAASA,YAAYA,CAACC,qBAAqB,EAAEC,KAAK,EAAE;EAE/D;EACA,IAAIC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,qBAAqB,CAACK,GAAG,GAAG,CAAC,CAAC;EACtD,IAAIC,GAAG,GAAGH,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEJ,qBAAqB,CAACK,GAAG,GAAG,CAAC,CAAC;EAErD,IAAIE,KAAK,GAAG,CAAC;EACb,KAAI,IAAIC,CAAC,GAAGN,KAAK,EAAEM,CAAC,IAAIF,GAAG,EAAEE,CAAC,EAAE,EAAE;IAC9B,IAAGP,KAAK,CAACD,qBAAqB,CAACS,GAAG,CAAC,CAACT,qBAAqB,CAACK,GAAG,CAAC,KAAKJ,KAAK,CAACD,qBAAqB,CAACS,GAAG,CAAC,CAACD,CAAC,CAAC,EAAE;MACpGD,KAAK,EAAE;IACX,CAAC,MAAM;MACHA,KAAK,GAAG,CAAC;IACb;IAEA,IAAGA,KAAK,KAAK,CAAC,EAAE;MACZ,OAAON,KAAK,CAACD,qBAAqB,CAACS,GAAG,CAAC,CAACT,qBAAqB,CAACK,GAAG,CAAC;IACtE;EACJ;;EAEA;EACAH,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,qBAAqB,CAACS,GAAG,GAAG,CAAC,CAAC;EAClDH,GAAG,GAAGH,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEJ,qBAAqB,CAACS,GAAG,GAAG,CAAC,CAAC;EAEjDF,KAAK,GAAG,CAAC;EACT,KAAI,IAAIC,CAAC,GAAGN,KAAK,EAAEM,CAAC,IAAIF,GAAG,EAAEE,CAAC,EAAE,EAAE;IAC9B,IAAGP,KAAK,CAACD,qBAAqB,CAACS,GAAG,CAAC,CAACT,qBAAqB,CAACK,GAAG,CAAC,KAAKJ,KAAK,CAACO,CAAC,CAAC,CAACR,qBAAqB,CAACK,GAAG,CAAC,EAAE;MACpGE,KAAK,EAAE;IACX,CAAC,MAAM;MACHA,KAAK,GAAG,CAAC;IACb;IAEA,IAAGA,KAAK,KAAK,CAAC,EAAE;MACZ,OAAON,KAAK,CAACD,qBAAqB,CAACS,GAAG,CAAC,CAACT,qBAAqB,CAACK,GAAG,CAAC;IACtE;EACJ;EAEA,OAAO,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}