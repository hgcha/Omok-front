{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HyungGeun\\\\Documents\\\\omok-front\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport topLeftCorner from './images/topLeftCorner.png';\nimport topRightCorner from './images/topRightCorner.png';\nimport bottomLeftCorner from './images/bottomLeftCorner.png';\nimport bottomRightCorner from './images/bottomRightCorner.png';\nimport upLine from './images/upLine.png';\nimport downLine from './images/downLine.png';\nimport leftLine from './images/leftLine.png';\nimport rightLine from './images/rightLine.png';\nimport crossLine from './images/crossLine.png';\nimport whiteStone from './images/whiteStone.png';\nimport blackStone from './images/blackStone.png';\nimport './App.css';\nimport decideWinner from './decideWinner';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Board() {\n  _s();\n  const [board, setBoard] = useState(Array(19).fill(Array(19).fill(null)));\n  const [isBlackTurn, setIsBlackTurn] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const rows = [];\n  for (let i = 0; i < 19; i++) {\n    rows.push( /*#__PURE__*/_jsxDEV(Row, {\n      rowNumber: i,\n      board: board,\n      setBoard: setBoard,\n      isBlackTurn: isBlackTurn,\n      setIsBlackTurn: setIsBlackTurn,\n      winner: winner,\n      setWinner: setWinner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 19\n    }, this));\n  }\n  useEffect(() => {\n    const connection = new WebSocket(\"ws://localhost:8080/Omok/socket/chatt\");\n    setTimeout(() => {\n      console.log(connection.readyState);\n    }, 3000);\n  }, []);\n  let content;\n  if (winner) {\n    content = 'Winner: ' + (winner === 'B' ? 'Black' : 'White');\n  } else {\n    content = 'Next turn: ' + (isBlackTurn ? 'Black' : 'White');\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: rows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Board, \"XIXBH78mUyqF0E6J30vQNLmDzVM=\");\n_c = Board;\nfunction Row(props) {\n  let leftmost;\n  let middle;\n  let rightmost;\n  if (props.rowNumber === 0) {\n    leftmost = topLeftCorner;\n    middle = upLine;\n    rightmost = topRightCorner;\n  } else if (props.rowNumber === 18) {\n    leftmost = bottomLeftCorner;\n    middle = downLine;\n    rightmost = bottomRightCorner;\n  } else {\n    leftmost = leftLine;\n    middle = crossLine;\n    rightmost = rightLine;\n  }\n  const row = [];\n  row.push( /*#__PURE__*/_jsxDEV(Square, {\n    line: leftmost,\n    position: 0,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 14\n  }, this));\n  for (let i = 1; i <= 17; i++) row.push( /*#__PURE__*/_jsxDEV(Square, {\n    line: middle,\n    position: i,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 18\n  }, this));\n  row.push( /*#__PURE__*/_jsxDEV(Square, {\n    line: rightmost,\n    position: 18,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 14\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: row\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n_c2 = Row;\nfunction Square(_ref) {\n  let {\n    line,\n    rowNumber,\n    position,\n    board,\n    setBoard,\n    isBlackTurn,\n    setIsBlackTurn,\n    winner,\n    setWinner\n  } = _ref;\n  function handleClick() {\n    if (board[rowNumber][position]) return;\n    const nextBoard = board.map(row => {\n      return row.slice();\n    });\n    if (isBlackTurn) {\n      nextBoard[rowNumber][position] = 'B';\n    } else {\n      nextBoard[rowNumber][position] = 'W';\n    }\n    setWinner(decideWinner({\n      row: rowNumber,\n      col: position\n    }, nextBoard));\n    setIsBlackTurn(!isBlackTurn);\n    setBoard(nextBoard);\n  }\n  let stone = null;\n  if (board[rowNumber][position] === 'W') {\n    stone = /*#__PURE__*/_jsxDEV(\"img\", {\n      src: whiteStone,\n      width: \"25px\",\n      height: \"25px\",\n      alt: \"whiteStone\",\n      style: {\n        position: 'relative',\n        top: '-28px',\n        left: '1px',\n        zIndex: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }, this);\n  } else if (board[rowNumber][position] === 'B') {\n    stone = /*#__PURE__*/_jsxDEV(\"img\", {\n      src: blackStone,\n      width: \"25px\",\n      height: \"25px\",\n      alt: \"blackStone\",\n      style: {\n        position: 'relative',\n        top: '-28px',\n        left: '1px',\n        zIndex: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }, this);\n  } else {\n    stone = null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"square\",\n    onClick: () => {\n      if (!winner) handleClick();\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: line,\n      width: \"25px\",\n      height: \"25px\",\n      alt: \"pattern\",\n      style: {\n        position: 'relative',\n        top: '0px',\n        left: '0px',\n        zIndex: 0\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), stone]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n_c3 = Square;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Board\");\n$RefreshReg$(_c2, \"Row\");\n$RefreshReg$(_c3, \"Square\");","map":{"version":3,"names":["useState","useEffect","topLeftCorner","topRightCorner","bottomLeftCorner","bottomRightCorner","upLine","downLine","leftLine","rightLine","crossLine","whiteStone","blackStone","decideWinner","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","_s","board","setBoard","Array","fill","isBlackTurn","setIsBlackTurn","winner","setWinner","rows","i","push","Row","rowNumber","fileName","_jsxFileName","lineNumber","columnNumber","connection","WebSocket","setTimeout","console","log","readyState","content","children","_c","props","leftmost","middle","rightmost","row","Square","line","position","_c2","_ref","handleClick","nextBoard","map","slice","col","stone","src","width","height","alt","style","top","left","zIndex","className","onClick","_c3","$RefreshReg$"],"sources":["C:/Users/HyungGeun/Documents/omok-front/src/Board.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport topLeftCorner from './images/topLeftCorner.png';\r\nimport topRightCorner from './images/topRightCorner.png';\r\nimport bottomLeftCorner from './images/bottomLeftCorner.png';\r\nimport bottomRightCorner from './images/bottomRightCorner.png';\r\nimport upLine from './images/upLine.png';\r\nimport downLine from './images/downLine.png';\r\nimport leftLine from './images/leftLine.png';\r\nimport rightLine from './images/rightLine.png';\r\nimport crossLine from './images/crossLine.png';\r\nimport whiteStone from './images/whiteStone.png';\r\nimport blackStone from './images/blackStone.png';\r\nimport './App.css';\r\nimport decideWinner from './decideWinner';\r\n\r\nexport default function Board() {\r\n\r\n    const [board, setBoard] = useState(Array(19).fill(Array(19).fill(null)));\r\n    const [isBlackTurn, setIsBlackTurn] = useState(true);\r\n    const [winner, setWinner] = useState(null);\r\n\r\n    const rows = [];\r\n    for (let i = 0; i < 19; i++) {\r\n        rows.push(<Row rowNumber={i}\r\n            board={board}\r\n            setBoard={setBoard}\r\n            isBlackTurn={isBlackTurn}\r\n            setIsBlackTurn={setIsBlackTurn}\r\n            winner={winner}\r\n            setWinner={setWinner}\r\n        />);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const connection = new WebSocket(\"ws://localhost:8080/Omok/socket/chatt\");\r\n        setTimeout(() => {\r\n            console.log(connection.readyState);\r\n        }, 3000);\r\n    }, []);\r\n    \r\n    let content;\r\n    if(winner) {\r\n        content = 'Winner: ' + (winner === 'B' ? 'Black' : 'White');\r\n    } else {\r\n        content = 'Next turn: ' + (isBlackTurn ? 'Black' : 'White');\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <p>\r\n                {content}\r\n            </p>\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Row(props) {\r\n\r\n    let leftmost;\r\n    let middle;\r\n    let rightmost;\r\n\r\n    if (props.rowNumber === 0) {\r\n        leftmost = topLeftCorner;\r\n        middle = upLine;\r\n        rightmost = topRightCorner;\r\n    } else if (props.rowNumber === 18) {\r\n        leftmost = bottomLeftCorner;\r\n        middle = downLine;\r\n        rightmost = bottomRightCorner;\r\n    } else {\r\n        leftmost = leftLine;\r\n        middle = crossLine;\r\n        rightmost = rightLine;\r\n    }\r\n\r\n    const row = [];\r\n    row.push(<Square line={leftmost} position={0} {...props} />);\r\n    for (let i = 1; i <= 17; i++)\r\n        row.push(<Square line={middle} position={i} {...props} />);\r\n    row.push(<Square line={rightmost} position={18} {...props} />);\r\n\r\n    return (\r\n        <div>\r\n            {row}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Square({ line, rowNumber, position, board, setBoard, isBlackTurn, setIsBlackTurn, winner, setWinner }) {\r\n\r\n    function handleClick() {\r\n        if (board[rowNumber][position])\r\n            return;\r\n\r\n        const nextBoard = board.map(row => {\r\n            return row.slice();\r\n        });\r\n\r\n        if (isBlackTurn) {\r\n            nextBoard[rowNumber][position] = 'B';\r\n        } else {\r\n            nextBoard[rowNumber][position] = 'W';\r\n        }\r\n\r\n        setWinner(decideWinner({row: rowNumber, col: position}, nextBoard));\r\n        setIsBlackTurn(!isBlackTurn);\r\n        setBoard(nextBoard);\r\n    }\r\n\r\n    let stone = null;\r\n    if (board[rowNumber][position] === 'W') {\r\n        stone = <img src={whiteStone} width='25px' height='25px' alt='whiteStone' style={{ position: 'relative', top: '-28px', left: '1px', zIndex: 1 }} />;\r\n    } else if (board[rowNumber][position] === 'B') {\r\n        stone = <img src={blackStone} width='25px' height='25px' alt='blackStone' style={{ position: 'relative', top: '-28px', left: '1px', zIndex: 1 }} />;\r\n    } else {\r\n        stone = null;\r\n    }\r\n\r\n    return (\r\n        <div className='square' onClick={() => {\r\n            if(!winner)\r\n                handleClick();\r\n        }}>\r\n            <img src={line} width='25px' height='25px' alt='pattern' style={{ position: 'relative', top: '0px', left: '0px', zIndex: 0 }} />\r\n            {stone}\r\n        </div>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}