{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HyungGeun\\\\Documents\\\\omok-front\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Row from './Row.js';\nimport decideWinner from './decideWinner.js';\nimport './App.css';\nimport { useConnection, useMessage } from './network.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Board() {\n  _s();\n  const [board, setBoard] = useState(Array(19).fill(Array(19).fill(null)));\n  const [turn, setTurn] = useState('black');\n  const [color, setColor] = useState(null);\n  const [beforeMove, setBeforeMove] = useState({\n    row: null,\n    col: null\n  });\n  useConnection(\"ws://localhost:8080/omok\");\n  function onMessage(message) {\n    const data = JSON.parse(message.data);\n    switch (data['type']) {\n      case 'SET_STONE_COLOR':\n        setColor(data.color);\n        console.log('Setted to ' + data.color + '!');\n        break;\n      case 'GET_OPPONENT_POSITION':\n        const nextBoard = board.map(row => {\n          return row.slice();\n        });\n        const row = data.row;\n        const col = data.col;\n        nextBoard[row][col] = data.color;\n        setBoard(nextBoard);\n        setBeforeMove({\n          row: row,\n          col: col\n        });\n        if (data.color === 'white') {\n          setTurn('black');\n        } else {\n          setTurn('white');\n        }\n        break;\n      default:\n        break;\n    }\n  }\n  useMessage(onMessage);\n  const winner = decideWinner(beforeMove, board);\n  let content;\n  if (winner) {\n    content = 'Winner: ' + (winner === 'black' ? 'Black' : 'White');\n  } else {\n    if (turn === color) {\n      content = 'Your turn!';\n    } else {\n      content = 'Waiting for opponent...';\n    }\n  }\n  const rows = [];\n  for (let i = 0; i < 19; i++) {\n    rows.push( /*#__PURE__*/_jsxDEV(Row, {\n      rowNumber: i,\n      board: board,\n      setBoard: setBoard,\n      turn: turn,\n      setTurn: setTurn,\n      color: color,\n      winner: winner,\n      setBeforeMove: setBeforeMove\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 19\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: rows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Board, \"9aYqUb99zejpKIjxhxV+2nixjYU=\", false, function () {\n  return [useConnection, useMessage];\n});\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","Row","decideWinner","useConnection","useMessage","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","_s","board","setBoard","Array","fill","turn","setTurn","color","setColor","beforeMove","setBeforeMove","row","col","onMessage","message","data","JSON","parse","console","log","nextBoard","map","slice","winner","content","rows","i","push","rowNumber","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["C:/Users/HyungGeun/Documents/omok-front/src/Board.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport Row from './Row.js';\r\nimport decideWinner from './decideWinner.js';\r\nimport './App.css';\r\nimport { useConnection, useMessage } from './network.js';\r\n\r\nexport default function Board() {\r\n\r\n    const [board, setBoard] = useState(Array(19).fill(Array(19).fill(null)));\r\n    const [turn, setTurn] = useState('black');\r\n    const [color, setColor] = useState(null);\r\n    const [beforeMove, setBeforeMove] = useState({ row: null, col: null });\r\n\r\n    useConnection(\"ws://localhost:8080/omok\");\r\n\r\n    function onMessage(message) {\r\n        const data = JSON.parse(message.data);\r\n        switch (data['type']) {\r\n            case 'SET_STONE_COLOR':\r\n                setColor(data.color);\r\n                console.log('Setted to ' + data.color + '!');\r\n                break;\r\n            case 'GET_OPPONENT_POSITION':\r\n                const nextBoard = board.map(row => {\r\n                    return row.slice();\r\n                });\r\n\r\n                const row = data.row;\r\n                const col = data.col;\r\n                nextBoard[row][col] = data.color;\r\n\r\n                setBoard(nextBoard);\r\n                setBeforeMove({ row: row, col: col });\r\n                if (data.color === 'white') {\r\n                    setTurn('black');\r\n                } else {\r\n                    setTurn('white');\r\n                }\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    useMessage(onMessage);\r\n\r\n    const winner = decideWinner(beforeMove, board);\r\n\r\n    let content;\r\n    if (winner) {\r\n        content = 'Winner: ' + (winner === 'black' ? 'Black' : 'White');\r\n    } else {\r\n        if (turn === color) {\r\n            content = 'Your turn!';\r\n        } else {\r\n            content = 'Waiting for opponent...';\r\n        }\r\n    }\r\n\r\n    const rows = [];\r\n    for (let i = 0; i < 19; i++) {\r\n        rows.push(<Row rowNumber={i}\r\n            board={board}\r\n            setBoard={setBoard}\r\n            turn={turn}\r\n            setTurn={setTurn}\r\n            color={color}\r\n            winner={winner}\r\n            setBeforeMove={setBeforeMove}\r\n        />);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <p>\r\n                {content}\r\n            </p>\r\n            <div>\r\n                {rows}\r\n            </div>\r\n        </>\r\n    );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}